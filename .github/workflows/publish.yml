name: Publish Extension

on:
  workflow_dispatch:
    inputs:
      releaseType:
        description: 'Next version increment type (patch, minor, major)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        # Need to fetch history for proper version bumping and committing
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 20
    
    - name: Cache node modules
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    
    - name: Install dependencies
      run: npm ci
    
    # Get current version to use for release
    - name: Get current version
      id: current_version
      run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
    
    - name: Run linting
      run: npm run lint
    
    - name: Install xvfb
      run: sudo apt-get install -y xvfb
    
    - name: Run tests
      run: xvfb-run -a npm test
    
    - name: Build extension with webpack
      run: npm run webpack
    
    - name: Install vsce
      run: npm install -g @vscode/vsce
    
    - name: Package extension
      run: |
        npm run package
        # The vsce tool creates a file with format: {name}-{version}.vsix
        echo "VSIX_PATH=./out/slidev-copilot-${{ steps.current_version.outputs.version }}.vsix" >> $GITHUB_ENV
        ls -la ./out/
    
    # Generate changelog
    - name: Generate changelog
      id: changelog
      run: |
        # Find the previous tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 --match "v*" HEAD^ 2>/dev/null || echo "")
        CURRENT_TAG="v${{ steps.current_version.outputs.version }}"
        
        echo "Generating changelog from $PREVIOUS_TAG to $CURRENT_TAG"
        
        if [ -z "$PREVIOUS_TAG" ]; then
          # If there's no previous tag, get all commits
          CHANGELOG=$(git log --pretty=format:"- %s" --no-merges)
        else
          # If there is a previous tag, get commits between tags
          CHANGELOG=$(git log --pretty=format:"- %s" --no-merges ${PREVIOUS_TAG}..HEAD)
        fi
        echo "CHANGELOG<<EOF" >> $GITHUB_ENV
        echo "$CHANGELOG" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
    
    - name: Publish to Visual Studio Marketplace
      uses: HaaLeo/publish-vscode-extension@v2
      with:
        pat: ${{ secrets.VSCE_PAT }}
        registryUrl: https://marketplace.visualstudio.com
        extensionFile: ${{ env.VSIX_PATH }}
    
    # Create git tag for the current version
    - name: Create git tag for current version
      run: |
        git config --global user.name 'GitHub Actions'
        git config --global user.email 'github-actions@github.com'
        git tag -a v${{ steps.current_version.outputs.version }} -m "Release v${{ steps.current_version.outputs.version }}"
        git push --tags
    
    # Create GitHub Release for current version
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.current_version.outputs.version }}
        name: Release v${{ steps.current_version.outputs.version }}
        body: |
          ## What's Changed
          ${{ env.CHANGELOG }}
        draft: true
        files: ${{ env.VSIX_PATH }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    # NOW bump version for the next development cycle
    - name: Bump version for next development cycle
      run: |
        npm version ${{ github.event.inputs.releaseType }} --no-git-tag-version
        NEW_VERSION=$(node -p "require('./package.json').version")
        echo "Bumped version from ${{ steps.current_version.outputs.version }} to $NEW_VERSION for next development cycle"
    
    # Commit the version bump
    - name: Commit version bump
      run: |
        git add package.json
        git commit -m "chore: bump version to $(node -p "require('./package.json').version") [skip ci]"
        git push